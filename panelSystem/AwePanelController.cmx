/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package $dynamicPackageName;

public class AwePanelController extends Snapper {

    public AweMPC<AwePanelModel, AwePanelProduct>;

    public AwePropBag props(this, 
        [AweProp:
            AweProp("width", "Width", DistanceEnum(24inch, 30inch, 36inch, 42inch, 48inch, 54inch, 60inch), function width_changed),
            AweProp("height", "Height", DistanceEnum(30inch, 42inch, 54inch, 66inch), function height_changed),
            AweProp("panelType", "Panel Type", StrSubSet([str: "Monolithic", "Segmented"]), function panelType_changed),
            AweProp("fabricColor", "Fabric Color", StrSubSet([str: "Biege", "Red", "Blue"]), function fabricColor_changed),
            AweProp("frameColor", "Frame Color", StrSubSet([str: "White", "Black"]), function frameColor_changed)
        ],
        onChange=function property_changed);


    public aweQuickPropertiesBinder(props);

    //tiles
    //always visible
    private AwePanelTileModel sideABottomTile();
    private AwePanelTileModel sideBBottomTile();

    //only when Segmented
    private AwePanelTileModel sideATopTile();
    private AwePanelTileModel sideBTopTile();

    private AwePanelTileModel[] allTiles();


    public void drawFeatures(LayerBuffer lb, View inView, GeometricFinder finder=null) {
            //super(..);

            line2D frontLine = model.centerline.offset(-model.frameThickness / 2 + .5inch);
            line2D backLine = model.centerline.offset(model.frameThickness / 2 + .5inch );

            new GDot(frontLine.p0).draw(lb);
            new GDot(frontLine.p1).draw(lb);
            new GDot(backLine.p0).draw(lb);
            new GDot(backLine.p1).draw(lb);
        }


        private AweConnectorCache _cc();

        public void connectors(ConnectorCollection coll) {
            coll << _cc.get("p0", this, model.centerline.p0.point, orientation(180deg), ctAlways);
            coll << _cc.get("p1", this, model.centerline.p1.point, orientation(0deg), ctAlways);
        }

        public box localBound() {
            rect r(
                    (0, -model.frameThickness /2),
                    (model.centerline.length, model.frameThickness /2)
                );
            return box(r, 0, model.height);
        }


        public constructor() {
            allTiles << sideABottomTile << sideBBottomTile << sideATopTile << sideBTopTile;
            initProps();
            updateEndCaps();
            super(..);
        }   

        extend private void initProps() {
            props.set("width", distance(42inch));
            props.set("height", distance(54inch));
            props.set("panelType", "Monolithic");
            props.set("fabricColor", "Biege");
            props.set("frameColor", "White");
        }

        private double racewayHeight = 6inch;

        extend private void adjustTileHeights() {
            if(props.get("panelType").?toS == "Monolithic") {
                sideABottomTile.z = racewayHeight;
                sideABottomTile.height = model.height - racewayHeight;
                sideBBottomTile.z = racewayHeight;
                sideBBottomTile.height = model.height - racewayHeight;
            } else {
                double segmentedBottomTileHeight = 22inch;

                sideABottomTile.z = racewayHeight;
                sideABottomTile.height = segmentedBottomTileHeight;
                sideBBottomTile.z = racewayHeight;
                sideBBottomTile.height = segmentedBottomTileHeight;

                sideATopTile.z = racewayHeight + segmentedBottomTileHeight;
                sideATopTile.height = model.height - racewayHeight - segmentedBottomTileHeight;
                sideBTopTile.z = racewayHeight + segmentedBottomTileHeight;
                sideBTopTile.height = model.height - racewayHeight -segmentedBottomTileHeight;
            }

            model.sideARaceway.z = .5inch;
            model.sideARaceway.height = racewayHeight - .5inch;
            model.sideBRaceway.z = .5inch;
            model.sideBRaceway.height = racewayHeight - .5inch;

        }

        extend private void adjustTileWidth() {
            for(t in allTilesAndRaceways(), index=i) {
                //every other tile is a side B tile
                line2D line = i%2==0 ?  model.centerline : model.centerline.flip();
                t.insideBottomLine = line.offset(-model.frameThickness/2);
                t.thickness = .5inch;
                
            }
        }

        extend private AwePanelTileModel[] allTilesAndRaceways() {
            AwePanelTileModel[] tiles();
            tiles += model.tiles;
            tiles << model.sideARaceway;
            tiles << model.sideBRaceway;
            return tiles;
        }

        public void connected(Connector c0, Connector c1, bool snapped, bool attached) {
            updateEndCaps();
        }

        public void disconnected(Connector c0, Connector c1, bool wasSnapped, bool wasAttached) {
            updateEndCaps();
        }

        extend private void updateEndCaps() {
            bool changed = false;
            bool openEndOnLeft = !_cc.get("p0").?isConnected;
            bool openEndOnRight = !_cc.get("p1").?isConnected;
            if(openEndOnLeft != model.openEndOnLeft) {
                model.openEndOnLeft = openEndOnLeft;
                changed = true;
            }
            if(openEndOnRight != model.openEndOnRight) {
                model.openEndOnRight = openEndOnRight;
                changed = true;
            }
            if(changed) {
                modelUpdated();
            }
        }

    }


private void width_changed(Object newValue, Object oldValue, Snapper controller) {
    controller.AwePanelController.model.centerline = line2D((0,0), (newValue.double, 0));
    controller.AwePanelController.adjustTileWidth();
}

private void height_changed(Object newValue, Object oldValue, Snapper controller) {
    AwePanelController panel = controller.AwePanelController;
    panel.model.height = newValue.double;
    panel.adjustTileHeights();
    for(s in panel.space.?selection.?snappers) {
        if(s as AwePanelController and s != panel) {
            s.props.set("height", newValue.double);
        }
        else if(s as AwePanelJunctionController) {
            s.props.set("height", newValue.double);
        }
    }
}

private void panelType_changed(Object newValue, Object oldValue, Snapper controller) {
    AwePanelController panel = controller.AwePanelController;
    str panelType = newValue.toS;

    if(panelType == "Segmented") {
        //order here matters for BOM
        panel.model.tiles = [AwePanelTileModel: panel.sideABottomTile, panel.sideBBottomTile, panel.sideATopTile, panel.sideBTopTile];
    } else {
        panel.model.tiles = [AwePanelTileModel: panel.sideABottomTile, panel.sideBBottomTile];
    }
    panel.adjustTileHeights();
    panel.adjustTileWidth();

    for(s in panel.space.?selection.?snappers) {
        if(s as AwePanelController and s != panel) {
            s.props.set("panelType", panelType);
        }
        
    }
}

private void fabricColor_changed(Object newValue, Object oldValue, Snapper controller) {
    AwePanelController panel = controller.AwePanelController;
    str fabricColor = newValue.toS;
    Material3D material = beigeFabricMaterial3D();
    if(fabricColor == "Red") material = redFabricMaterial3D();
    if(fabricColor == "Blue") material = blueFabricMaterial3D();
    for(t in panel.allTiles) {
        t.material = material;
    }
    for(s in panel.space.?selection.?snappers) {
        if(s as AwePanelController and s != panel) {
            s.props.set("fabricColor", fabricColor);
        }
        
    }
}

private void frameColor_changed(Object newValue, Object oldValue, Snapper controller) {
    AwePanelController panel = controller.AwePanelController;
    str frameColor = newValue.toS;
    Material3D material = intenseWhiteMaterial3D();
    if(frameColor == "Black") material = blackPlasticMaterial3D();
    panel.model.frameMaterial = material;
    panel.model.sideARaceway.material = material;
    panel.model.sideBRaceway.material = material;
    for(s in panel.space.?selection.?snappers) {
        if(s as AwePanelController and s != panel) {
            s.props.set("frameColor", frameColor);
        }
        else if(s as AwePanelJunctionController) {
            s.props.set("frameColor", frameColor);
        }
    }
}

private void property_changed(Object newValue, Object oldValue, Snapper controller) {
    controller.AwePanelController.modelUpdated();
}


{
    AwePanelController().launch();
}