/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package $dynamicPackageName;

public class Awe3D extends Instance3D {
    public constructor() {
        
    }

    public constructor(rest: Primitive3D[] prims) {
        for(p in prims) {
            this << p;
        }
    }

    extend public Awe3D operator << (Primitive3D prim) {
        Primitive3D[] prims();
        if(subPrims) {
            prims += subPrims;
        }
        prims << prim;
        setSubPrims(prims);
        return this;
    }

    extend public Primitive3D super3D() {
        return this;
    }

    //copied from core because it is final
    extend private void setSubPrims(Primitive3D[] primitives) {

        for (p in primitives, index=i, reverse) if (p.empty()) primitives.remove(i); // remove invisible

        if (primitives.any()) {
            _subPrims = copy(primitives, shallow=true); // to mimic a primitives.seq as above 
        }
    }
}