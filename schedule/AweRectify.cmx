/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package $dynamicPackageName;

public class AweRectify { 

    private Graph[] graph() : public readable;
    private double currentY;
    private double lastY;
    private double lastX;
    private double borderOffset = 2inch;
    private double defaultTextHeight = 5inch;

    public constructor() { }

    extend public AweRectify moveY(double newY) {
        this.lastY = this.currentY;
        this.currentY = this.lastY + newY;
        this.lastX = 0;
        return this;
    }

    extend public AweRectify addBottomHalf(double xPosition) {
        this.graph << GLine((this.lastX, this.lastY), (this.lastX, this.currentY));
        this.graph << GLine((this.lastX + xPosition, this.currentY), (this.lastX+xPosition, this.lastY));
        this.graph << GLine((this.lastX, this.lastY), (this.lastX+xPosition, this.lastY));
        this.lastX += xPosition;
        return this;
    }

    extend public AweRectify addTopHalf(double xPosition, str text = null, alignment textAlign=alignment.middle) {
        this.graph << GLine((this.lastX, this.lastY), (this.lastX, this.currentY));
        this.graph << GLine((this.lastX, this.currentY), (this.lastX + xPosition, this.currentY));
        this.graph << GLine((this.lastX + xPosition, this.currentY), (this.lastX + xPosition, this.lastY));
        if (text) {
            aweVar l2 = line2D((this.lastX, this.lastY), (this.lastX + xPosition,this.lastY));
            this.addText(l2, text, textAlign=textAlign);
        }
        this.lastX += xPosition;
        return this;
    }

    extend public AweRectify add(double xPosition, str text = null, alignment textAlign=alignment.middle) {
        aweVar p1 = (this.lastX + xPosition, this.currentY);
        rect r((this.lastX, this.lastY), p1);
        this.graph << GRect(r);
        if (text) {
            aweVar l2 = line2D((this.lastX, this.lastY), p1);
            this.addText(l2, text, textAlign=textAlign);
        }
        this.lastX += xPosition;
        return this;
    }

    extend public AweRectify addFooterText(str text) { 
        if (this.graph.count > 0) { 
            bug("Footer text should be the first information provided to this component");
        }

        if (!text) { return this; }

        aweVar y = -(defaultTextHeight*1.5);
        this.graph << GText((0, y), text, alignment.downLeft, h=defaultTextHeight);

        return this; 
    }

    extend private void addText(line2D l2, str text, Double offset = null, alignment textAlign=alignment.middle) {

        if (!text) { return; }

        str nextText;
        aweVar textG = GText((0,0), text, alignment.downLeft, h=defaultTextHeight);
        aweVar textW = textG.evaluatedSize.w;
        double myOffset = offset ? offset.v : 0;
        if (l2.length < getRealTextWidth(textW)) {
            
            aweVar adjustedText = this.splitText(text, l2.length);
            aweVar finalText = adjustedText.v0;
            nextText = adjustedText.v1;
            
            textG = GText((0,0), finalText, alignment.downLeft, h=defaultTextHeight);
            textW = textG.evaluatedSize.w;
            if (!offset) { 
                myOffset = defaultTextHeight/2 + borderOffset;
            }
        }
        aweVar mid = l2.midPoint;

        switch (textAlign) {
            case alignment.left: {
                textG.pos = (l2.p0.x + borderOffset, mid.y - borderOffset + myOffset);    
            }
            case alignment.middle: {
                textG.pos = (mid.x - (textW/2) + borderOffset, mid.y - borderOffset + myOffset);    
            }
            default: {
                bug("Text alignment " # textAlign # " not implemented!");
            }
        }

        this.graph << textG;
        if (nextText) { 
            l2.move((0, -defaultTextHeight));
            this.addText(l2, nextText, myOffset);
        }	
    }

    extend private double getRealTextWidth(double calculatedWidth) { 
        return (calculatedWidth + (borderOffset * 2.5));
    }

    extend private <str, str> splitText(str text, double maxWidth) { 

        aweVar textLength = text.count-1;
        aweVar currentIndex = textLength;

        while (currentIndex >= 0) { 

            aweVar v0Text = text.substring(0, --currentIndex);
            aweVar textG = GText((0,0), v0Text, alignment.downLeft, h=defaultTextHeight);
            if (getRealTextWidth(textG.evaluatedSize.w) < maxWidth) { 
                return new <str, str>(v0Text, text.substring(currentIndex + 1, textLength));
            }
        }

        return null;
    }

    extend public double totalWidth() { 
        return this.lastX;
    }

    extend public double totalHeight() { 
        return this.currentY;
    }

    extend public AweGraph getAll() {
        
        AweGraph result();

        for (g in this.graph) { 
            result << g;
        }

        return result;
    }
}

