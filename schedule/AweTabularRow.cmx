/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package $dynamicPackageName;

public class AweTabularRow {

    private AweTabularCell[] cells() : public readable;
    private AweTabularTable _table;
    private AweTabularRow _next;
    private AweTabularRow _prev;
    private int _index;
    private bool _normalized : public readable;
    public double _height;
    
    public constructor(double height=0) { 
        if (height == 0) height = DefaultRowHeight;

        this._height = height;
    }

    extend public AweTabularRow operator<<(str data) { 
        return (this << AweTabularCell(data));
    }
    
    extend public AweTabularRow operator<<(AweTabularCell cell) { 
        
        if (!cell) { return this; }

        cell.row = this;

        /// Whenever we're adding a new row, this will point to the previous one.
        /// If this pointer is not null, we already have a scalfolded structure (created by the *normalize* 
        /// method) to store all the cells we receive via this method 
        if(this._prev) { 
            
            /// Find the first "empty" spot were we can place the reference to this new cell
            for (c in this.cells, index=i) {
                if (c.emptyContent) {
                    if (i > 0) { 
                        aweVar lastCell = this.cells[i-1];
                        if (lastCell) { 
                            lastCell.next = cell;
                            cell.prev = lastCell;
                        }
                    }
                    this.cells[i] = cell;
                    break;
                }
            }

        } else {
            
            /// Ok, so we're in the first row - lets find an empty spot to place the new cell
            if (this.cells.any) { 
                aweVar lastCell = this.cells.last;
                if (lastCell != null) { 
                    lastCell.next = cell;
                    cell.prev = lastCell;
                }
            }

            this.cells << cell;
        }

        /// Whenever a new cell is added we need to make sure it's height matches the max(height) defined
        /// in the table's spec
        cell.adjustSiblingHeight();
        return this;
    }

    extend public double height() { 
        return this._height;
    }

    extend public int index() { 
        return this._index;
    }

    extend public AweTabularRow next=(AweTabularRow r) { 
        if (!this._next) { 
            this._next = r;
        }
        return this;
    }

    extend public AweTabularRow prev() { 
        return this._prev;
    }

    extend public AweTabularRow prev=(AweTabularRow r) { 
        if (!this._prev) {
            this._prev = r;
            this.normalize();
        }
        return this;
    }

    extend private void normalize() {

        /// If we're the first row or we're already normalized, just move on...
        if (!this._prev or this._normalized) { return; }

        /// Initialize our scafolding cells witth black ones (AweEmptyTabularData) and 
        /// mark spaned cells to behave properly (AweTabularSpanedData)
        aweVar uBound = this._prev.cellsCount-1;
        AweTabularCell siblingCell;
        for (c in (0..uBound)) { 

            aweVar prevCell = this._prev[c];
            AweTabularCell newCell;

            if (prevCell != null) { 
                aweVar data = (prevCell.rowSpan > 0) ? AweTabularSpanedData(prevCell) : AweEmptyTabularData();
                newCell = AweTabularCell(data, prevCell.rawWidth, prev=siblingCell);
            } else {
                newCell = AweTabularCell(AweEmptyTabularData(), prev=siblingCell);
            }

            newCell.row = this;
            this.cells << newCell;

            if (siblingCell) { 
                siblingCell.next = newCell;
            }

            siblingCell = newCell;
        }

        this._normalized = true;
    }

    extend public int index=(int i) {
        return this._index = i;
    }
    
    extend public AweTabularTable table=(AweTabularTable t) { 
        return this._table = t;
    }

    extend public AweTabularCell operator[](int i) {
        
        if (i > this.cellsCount()) { 
            pln("Invalid cell index"; #i);
            return null;
        }

        /// This will always return the cell correspoding to the index provided considering 
        /// the spaned cells' information
        for (cell in this.cells, index=realIndex) {

            if ((cell == null) and (realIndex == i)) {
                return cell;
            }

            if (cell != null) { 
                if (i in cell.indexRange) { 
                    return cell;
                }
            }
        }
        return null;
    }

    extend public int cellsCount() {

        if (!this.cells.any) { 
            return -1;
        }

        /// This will count cells considering its colSpan information so all index based
        /// lookups can rely on this feature and properly adjust it's width accordingly 
        aweVar total = 0;
        for (cell in this.cells) 
            if ((cell != null) and (!cell.emptyContent)) {
                total += max(1, cell.?colSpan);
        }
        return total;
    }

    public str toS() { 
        return "[index: " # this.index # " - CellCount:" # this.cellsCount # " : Cells[]:" # this.cells.count # "]";
    }

    extend public str getHash() { 
        aweVar hash = "";
        for (cell in this.cells) { 
            hash #= cell.toS;
        }
        return hash;
    }
}

